--14--
CREATE TABLE Logs
(LogId     INT IDENTITY NOT NULL,
 AccountId INT,
 OldSum    DECIMAL(15, 2),
 NewSum    DECIMAL(15, 2)
);
GO

CREATE TRIGGER tr_Accounts ON Accounts
FOR UPDATE
AS
     BEGIN
         DECLARE @accountId INT=
(
    SELECT Id
    FROM inserted
)
         DECLARE @oldSum MONEY=
(
    SELECT Balance
    FROM deleted
)
         DECLARE @newSum MONEY=
(
    SELECT Balance
    FROM inserted
)
         INSERT INTO Logs
         VALUES
(@accountId,
 @oldSum,
 @newSum
)
     END

GO

--15--
--CREATE TABLE NotificationEmails
--(
--	Id INT PRIMARY KEY IDENTITY, 
--	Recipient INT FOREIGN KEY REFERENCES Accounts(Id), 
--	Subject VARCHAR(MAX) NOT NULL, 
--	Body VARCHAR(MAX) NOT NULL
--)

CREATE TRIGGER tr_NotificationsByEmail ON Logs FOR INSERT
AS
BEGIN

DECLARE @RecipientId INT
DECLARE @Subject VARCHAR(MAX)
DECLARE @Body VARCHAR(MAX)
DECLARE @OldAmount MONEY
DECLARE @NewAmount MONEY

SET @OldAmount = (SELECT OldSum FROM inserted)
SET @NewAmount = (SELECT NewSum FROM inserted)
SET @RecipientId = (SELECT AccountId FROM inserted)
SET @Subject = CONCAT('Balance change for account: ', (SELECT AccountId FROM inserted))
SET @Body = CONCAT('On ', GETDATE(), ' your balance was changed from ', @OldAmount, ' to ', @NewAmount, '.')

INSERT INTO NotificationEmails
VALUES (@RecipientId, @Subject, @Body)

END

--UPDATE Accounts
--SET Balance += 1000
--WHERE Id = 1

--UPDATE Accounts
--SET Balance -= 1000
--WHERE Id = 1
GO
--16--
CREATE PROC usp_DepositMoney @AccountId   INT,
                             @MoneyAmount DECIMAL(15, 4)
AS
     IF(@MoneyAmount >= 0)
         BEGIN
             UPDATE Accounts
               SET
                   Balance+=@MoneyAmount
             WHERE Id = @AccountId;
         END;

--SELECT * FROM Accounts WHERE Id = 5;
--EXEC usp_DepositMoney 5, 1000

--Second Solution--
--CREATE PROCEDURE usp_DepositMoney @accountId INT, @moneyAmount DECIMAL(15, 4)
--AS
--BEGIN
--	BEGIN TRAN
--	UPDATE Accounts
--	set Balance += @moneyAmount
--	WHERE Id = @accountId

--	IF (@@ROWCOUNT <> 1)
--	BEGIN
--		RAISERROR('Invalid account!', 16, 2)
--		ROLLBACK;
--		RETURN;
--	END

--	COMMIT
--END
GO

--17--
CREATE PROC usp_WithdrawMoney @AccountId   INT,
                             @MoneyAmount DECIMAL(15, 4)
AS
     IF(@MoneyAmount >= 0)
         BEGIN
             UPDATE Accounts
               SET
                   Balance-=@MoneyAmount
             WHERE Id = @AccountId;
         END;


--18--
CREATE PROC usp_TransferMoney
(@SenderId   INT,
 @ReceiverId INT,
 @Amount     DECIMAL(15, 4)
)
AS
    BEGIN TRAN;
        EXEC usp_WithdrawMoney
             @SenderId,
             @Amount;
        EXEC usp_DepositMoney
             @ReceiverId,
             @Amount;
        DECLARE @senderBalance DECIMAL(15, 4)=
(
    SELECT Balance
    FROM Accounts
    WHERE Id = @SenderId
);
        IF @senderBalance < 0
            BEGIN
                ROLLBACK;
                RETURN;
            END;
        COMMIT TRAN;
--EXEC usp_TransferMoney 5, 1, 5000
--SELECT Balance FROM Accounts WHERE Id = 1
GO

--19--

GO
--20--
DECLARE @userId INT = (SELECT Id FROM Users WHERE Username = 'Stamat')
DECLARE @gameId INT = (SELECT Id FROM Games WHERE [Name] = 'Safflower')
DECLARE @userGameId INT = (SELECT Id FROM UsersGames WHERE UserId = @userId AND GameId = @gameId)



BEGIN TRY
    BEGIN TRANSACTION;
    UPDATE UsersGames
      SET
          Cash-=
(
    SELECT SUM(Price)
    FROM Items
    WHERE MinLevel IN(11, 12)
)
    WHERE Id = @userGameId;
    DECLARE @userBalance DECIMAL(15, 4)=
(
    SELECT Cash
    FROM UsersGames
    WHERE Id = @userGameId
);
    IF @userBalance < 0
        BEGIN
            ROLLBACK;
            RETURN;
        END;
    INSERT INTO UserGameItems
           SELECT Id,
                  @userGameId
           FROM Items
           WHERE MinLevel IN(11, 12);
    COMMIT;
END TRY
BEGIN CATCH
    ROLLBACK;
END CATCH;
BEGIN TRY
    BEGIN TRANSACTION;
    UPDATE UsersGames
      SET
          Cash-=
(
    SELECT SUM(Price)
    FROM Items
    WHERE MinLevel BETWEEN 19 AND 21
)
    WHERE Id = @userGameId;
    SET @userBalance =
(
    SELECT Cash
    FROM UsersGames
    WHERE Id = @userGameId
);
    IF @userBalance < 0
        BEGIN
            ROLLBACK;
            RETURN;
        END;
    INSERT INTO UserGameItems
           SELECT Id,
                  @userGameId
           FROM Items
           WHERE MinLevel BETWEEN 19 AND 21;
    COMMIT;
END TRY
BEGIN CATCH
    ROLLBACK;
END CATCH;
SELECT i.Name AS [Item Name]
FROM Items AS i
     JOIN UserGameItems AS ugi ON ugi.ItemId = i.Id
WHERE ugi.UserGameId = @userGameId
ORDER BY [Item Name];
GO

--21--
CREATE PROC usp_AssignProject
(@EmployeeId INT,
 @ProjectId  INT
)
AS
     BEGIN
         BEGIN TRAN;
         INSERT INTO EmployeesProjects
(EmployeeID,
 ProjectID
)
         VALUES
(@EmployeeId,
 @ProjectId
);
         DECLARE @projectCount INT=
(
    SELECT COUNT(*)
    FROM EmployeesProjects
    WHERE EmployeeID = @EmployeeId
);
         IF @projectCount > 3
             BEGIN
                 ROLLBACK;
                 RAISERROR('The employee has too many projects!', 16, 1);
                 RETURN;
             END;
         COMMIT;
     END;

GO

--22--
CREATE TABLE Deleted_Employees
(EmployeeId   INT
 PRIMARY KEY IDENTITY,
 FirstName    VARCHAR(50) NOT NULL,
 LastName     VARCHAR(50) NOT NULL,
 MiddleName   VARCHAR(10),
 JobTitle     VARCHAR(50) NOT NULL,
 DepartmentID INT FOREIGN KEY REFERENCES Departments(DepartmentID),
 Salary       DECIMAL(15, 4)
);

CREATE TRIGGER t_FireEmployee ON Employees
AFTER DELETE
AS
     BEGIN
         INSERT INTO Deleted_Employees
                SELECT FirstName,
                       LastName,
                       MiddleName,
                       JobTitle,
                       DepartmentID,
                       Salary
                FROM deleted;
     END;
