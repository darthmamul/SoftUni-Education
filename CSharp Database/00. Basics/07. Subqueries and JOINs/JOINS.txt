--1--
SELECT TOP 5 e.EmployeeID,
             e.JobTitle,
             a.AddressID,
             a.AddressText
FROM Employees AS e
     JOIN Addresses AS a ON a.AddressID = e.AddressID
ORDER BY a.AddressID;

--2--
SELECT TOP 50 e.FirstName,
              e.LastName,
              t.Name AS Town,
              a.AddressText
FROM Employees AS e
     JOIN Addresses AS a ON a.AddressID = e.AddressID
     JOIN Towns AS t ON t.TownID = a.TownID
ORDER BY e.FirstName,
         e.LastName;

--3--
SELECT e.EmployeeID,
       e.FirstName,
       e.LastName,
       d.Name AS DepartmentName
FROM Employees AS e
     JOIN Departments AS d ON d.DepartmentID = e.DepartmentID
                              AND d.Name = 'Sales'
ORDER BY e.EmployeeID;

--4--
SELECT TOP 5 e.EmployeeID,
             e.FirstName,
             e.Salary,
             d.Name
FROM Employees AS e
     JOIN Departments AS d ON d.DepartmentID = e.DepartmentID
WHERE e.Salary > 15000
ORDER BY e.DepartmentID;

--5--
SELECT TOP (3) e.EmployeeID,
               e.FirstName
FROM Employees AS e
     LEFT JOIN EmployeesProjects AS ep ON ep.EmployeeID = e.EmployeeID
WHERE ep.EmployeeID IS NULL
ORDER BY e.EmployeeID;

--6--
SELECT e.FirstName,
       e.LastName,
       e.HireDate,
       d.Name AS DeptName
FROM Employees AS e
     JOIN Departments AS d ON d.DepartmentID = e.DepartmentID
                              AND d.Name IN('Sales', 'Finance')
                              AND e.HireDate > '19990101'
ORDER BY e.HireDate;

--7--
SELECT TOP (5) e.EmployeeID,
               e.FirstName,
               p.Name
FROM Employees AS e
     JOIN EmployeesProjects AS ep ON ep.EmployeeID = e.EmployeeID
     JOIN Projects AS p ON p.ProjectID = ep.ProjectID
WHERE p.StartDate > '2002.08.13'
      AND p.EndDate IS NULL
ORDER BY e.EmployeeID;

--8--
use SoftUni

SELECT e.EmployeeID,
       e.FirstName,
       CASE
           WHEN p.StartDate >= '2005/01/01'
           THEN NULL
           ELSE p.Name
       END AS ProjectName
FROM Employees AS e
     JOIN EmployeesProjects AS ep ON ep.EmployeeID = e.EmployeeID
     JOIN Projects AS p ON p.ProjectID = ep.ProjectID
WHERE ep.EmployeeID = 24;

--9--
SELECT e.EmployeeID,
       e.FirstName,
       e.ManagerID,
       e1.FirstName
FROM Employees AS e
     JOIN Employees AS e1 ON e1.EmployeeID = e.ManagerID
WHERE e.ManagerID IN(3, 7)
ORDER BY e.EmployeeID;

--10--
SELECT TOP 50 e.EmployeeID,
              e.FirstName+' '+e.LastName AS EmployeeName,
              e1.FirstName+' '+e1.LastName AS ManagerName,
              d.Name AS DepartmentName
FROM Employees AS e
     JOIN Employees AS e1 ON e1.EmployeeID = e.ManagerID
     JOIN Departments AS d ON d.DepartmentID = e.DepartmentID
ORDER BY e.EmployeeID;

--11--
SELECT MIN(e.AverageSalary) AS MinAverageSalary
FROM
(
    SELECT AVG(Salary) AS AverageSalary
    FROM Employees
    GROUP BY DepartmentID
) AS e;

--12--
USE Geography

SELECT c.CountryCode,
       m.MountainRange,
       p.PeakName,
       p.Elevation
FROM Countries AS c
     JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
     JOIN Peaks AS p ON p.MountainId = mc.MountainId
                        AND p.Elevation > 2835
     JOIN Mountains AS m ON m.Id = mc.MountainId
WHERE c.CountryName = 'Bulgaria'
ORDER BY p.Elevation DESC;

--13--
SELECT c.CountryCode,
       COUNT(mc.MountainId) AS MountainRanges
FROM Countries AS c
     JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
WHERE c.CountryCode IN('US', 'RU', 'BG')
GROUP BY c.CountryCode;

--14--
SELECT TOP (5) c.CountryName,
               r.RiverName
FROM Countries AS c
     LEFT JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
     LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
WHERE c.ContinentCode = 'AF'
ORDER BY c.CountryName;

--15--
WITH CTE_CountriesInfo(ContinentCode,
                       CurrencyCode,
                       CurrencyUsage)
     AS (
     SELECT ContinentCode,
            CurrencyCode,
            COUNT(CurrencyCode) AS CurrencyUsage
     FROM Countries
     GROUP BY ContinentCode,
              CurrencyCode
     HAVING COUNT(CurrencyCode) > 1)
     SELECT e.ContinentCode,
            cci.CurrencyCode,
            e.MaxCurrency AS CurrencyUsage
     FROM
(
    SELECT ContinentCode,
           MAX(CurrencyUsage) AS MaxCurrency
    FROM CTE_CountriesInfo
    GROUP BY ContinentCode
) AS e
JOIN CTE_CountriesInfo AS cci ON cci.ContinentCode = e.ContinentCode
                                 AND cci.CurrencyUsage = e.MaxCurrency;

--16--
SELECT COUNT(*) AS CountryCode
FROM Countries AS c
     LEFT JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
WHERE mc.CountryCode IS NULL;
GO

--17--
SELECT TOP (5) c.CountryName,
               MAX(p.Elevation) AS HighestPeak,
               MAX(r.Length) AS LongestRiver
FROM Countries AS c
     LEFT JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
     LEFT JOIN Peaks AS p ON p.MountainId = mc.MountainId
     LEFT JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
     LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
GROUP BY c.CountryName
ORDER BY HighestPeak DESC,
         LongestRiver DESC,
         c.CountryName;
go
--18--
WITH CTE_CoutrniesInfo(CountryName,
                       PeakName,
                       Elevation,
                       Mountain)
     AS (
     SELECT c.CountryName,
            p.PeakName,
            MAX(p.Elevation),
            m.MountainRange
     FROM Countries AS c
          LEFT JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
          LEFT JOIN Mountains AS m ON m.Id = mc.MountainId
          LEFT JOIN Peaks AS p ON p.MountainId = m.Id
     GROUP BY c.CountryName,
              p.PeakName,
              m.MountainRange)
     SELECT TOP (5) e.CountryName,
                    ISNULL(cci.PeakName, '(no highest peak)') AS [Highest Peak Name],
                    ISNULL(cci.Elevation, 0) AS [Highest Peak Elevation],
                    ISNULL(cci.Mountain, '(no mountain)') AS Mountain
     FROM
(
    SELECT CountryName,
           MAX(Elevation) AS MaxElevation
    FROM CTE_CoutrniesInfo
    GROUP BY CountryName
) AS e
LEFT JOIN CTE_CoutrniesInfo AS cci ON cci.CountryName = e.CountryName
                                      AND cci.Elevation = e.MaxElevation
     ORDER BY e.CountryName,
              cci.PeakName;