CREATE DATABASE TripService;

--01.CREATE TABLES--
CREATE TABLE Cities
(Id          INT
 PRIMARY KEY IDENTITY,
 [Name]      NVARCHAR(20) NOT NULL,
 CountryCode VARCHAR(2) NOT NULL
);
CREATE TABLE Hotels
(Id            INT
 PRIMARY KEY IDENTITY,
 [Name]        NVARCHAR(30) NOT NULL,
 CityId        INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
 EmployeeCount INT NOT NULL,
 BaseRate      DECIMAL(15, 2)
);
CREATE TABLE Rooms
(Id      INT
 PRIMARY KEY IDENTITY,
 Price   DECIMAL(15, 2) NOT NULL,
 [Type]  NVARCHAR(20) NOT NULL,
 Beds    INT NOT NULL,
 HotelId INT FOREIGN KEY REFERENCES Hotels(Id) NOT NULL
);
CREATE TABLE Trips
(Id          INT
 PRIMARY KEY IDENTITY,
 RoomId      INT FOREIGN KEY REFERENCES Rooms(Id) NOT NULL,
 BookDate    DATE NOT NULL,
 ArrivalDate DATE NOT NULL,
 ReturnDate  DATE NOT NULL,
 CancelDate  DATE,
 CONSTRAINT CHK_BookDate CHECK(BookDate < ArrivalDate),
 CONSTRAINT CHK_ArrivalDate CHECK(ArrivalDate < ReturnDate)
);
CREATE TABLE Accounts
(Id         INT
 PRIMARY KEY IDENTITY,
 FirstName  NVARCHAR(50) NOT NULL,
 MiddleName NVARCHAR(20),
 LastName   NVARCHAR(50) NOT NULL,
 CityId     INT FOREIGN KEY REFERENCES Cities(Id) NOT NULL,
 BirthDate  DATE NOT NULL,
 Email      VARCHAR(100)
 UNIQUE NOT NULL
);
CREATE TABLE AccountsTrips
(AccountId INT FOREIGN KEY REFERENCES Accounts(Id) NOT NULL,
 TripId    INT FOREIGN KEY REFERENCES Trips(Id) NOT NULL,
 Luggage   INT NOT NULL
               CHECK(Luggage >= 0),
 CONSTRAINT PK_AccountTrips PRIMARY KEY(AccountId, TripId)
);

--02.INSERT--
INSERT INTO Accounts
(FirstName,
 MiddleName,
 LastName,
 CityId,
 BirthDate,
 Email
)
VALUES
('John',
 'Smith',
 'Smith',
 34,
 '1975-07-21',
 'j_smith@gmail.com'
),
('Gosho',
 NULL,
 'Petrov',
 11,
 '1978-05-16',
 'g_petrov@gmail.com'
),
('Ivan',
 'Petrovich',
 'Pavlov',
 59,
 '1849-09-26',
 'i_pavlov@softuni.bg'
),
('Friedrich',
 'Wilhelm',
 'Nietzsche',
 2,
 '1844-10-15',
 'f_nietzsche@softuni.bg'
);
INSERT INTO Trips
(RoomId,
 BookDate,
 ArrivalDate,
 ReturnDate,
 CancelDate
)
VALUES
(101,
 '2015-04-12',
 '2015-04-14',
 '2015-04-20',
 '2015-02-02'
),
(102,
 '2015-07-07',
 '2015-07-15',
 '2015-07-22',
 '2015-04-29'
),
(103,
 '2013-07-17',
 '2013-07-23',
 '2013-07-24',
 NULL
),
(104,
 '2012-03-17',
 '2012-03-31',
 '2012-04-01',
 '2012-01-10'
),
(109,
 '2017-08-07',
 '2017-08-28',
 '2017-08-29',
 NULL
);

--03.update--
UPDATE Rooms
  SET
      Price = Price + (Price * 14 / 100.0)
WHERE HotelId IN(5, 7, 9);

 --04.delete--
DELETE FROM AccountsTrips
WHERE AccountId = 47;
DELETE FROM Accounts
WHERE Id = 47;

 --05.bulgarian cities
SELECT Id,
       Name
FROM Cities
WHERE CountryCode = 'BG'
ORDER BY Name;

--06.People Born After 1991--
SELECT RTRIM(COALESCE(FirstName+' ', '')+COALESCE(MiddleName+' ', '')+COALESCE(LastName+' ', '')) AS [Full Name],
       DATEPART(year, BirthDate) AS BirthYear
FROM Accounts
WHERE DATEPART(year, BirthDate) > '1991'
ORDER BY DATEPART(year, BirthDate) DESC,
         FirstName;

GO

--07.EEE-Mails--
SELECT FirstName,
       LastName,
       FORMAT(BirthDate, 'MM-dd-yyyy') AS BirthDate,
       c.Name AS Hometown,
       Email
FROM Accounts AS a
     JOIN Cities AS c ON c.Id = a.CityId
WHERE Email LIKE 'e%'
ORDER BY c.Name DESC;

--08.City Statistics--
SELECT c.Name AS City,
       COUNT(h.Id) AS Hotels
FROM Cities AS c
     LEFT JOIN Hotels AS h ON h.CityId = c.Id
GROUP BY c.Name
ORDER BY COUNT(h.Id) DESC,
         c.Name;

  --09--
SELECT r.Id AS Id,
       r.Price AS Price,
       h.Name AS Hotel,
       c.Name AS City
FROM Rooms AS r
     JOIN Hotels AS h ON h.Id = r.HotelId
     JOIN Cities AS c ON c.Id = h.CityId
WHERE Type = 'First Class'
ORDER BY r.Price DESC,
         r.Id;

--10.Longest and Shortest Trips --
SELECT a.Id AS [AccountId],
       CONCAT(a.FirstName, ' ', a.LastName) AS [FullName],
       MAX(DATEDIFF(day, t.ArrivalDate, t.ReturnDate)) AS [LongestTrip],
       MIN(DATEDIFF(day, t.ArrivalDate, t.ReturnDate)) AS [Shortesttrip]
FROM Accounts AS a
     JOIN AccountsTrips AS at ON at.AccountId = a.Id
     JOIN Trips AS t ON t.Id = at.TripId
WHERE a.MiddleName IS NULL
      AND t.CancelDate IS NULL
GROUP BY a.Id,
         a.FirstName,
         a.LastName
ORDER BY LongestTrip DESC,
         a.Id;

--11.Metropolis--
SELECT TOP 5 c.Id,
             C.Name,
             c.CountryCode,
             COUNT(c.Id)
FROM Cities AS c
     JOIN Accounts AS a ON a.CityId = c.Id
GROUP BY c.Id,
         c.Name,
         c.CountryCode
ORDER BY COUNT(c.Id) DESC;

--12.Romantic Getaways--
SELECT a.Id,
       a.Email,
       c.Name,
       COUNT(t.Id) AS Trips
FROM Accounts AS a
     JOIN AccountsTrips AS atr ON atr.AccountId = a.Id
     JOIN Trips AS t ON t.Id = atr.TripId
     JOIN Rooms AS r ON r.Id = t.RoomId
     JOIN Hotels AS h ON h.Id = r.HotelId
     JOIN Cities AS c ON c.Id = h.CityId
WHERE c.Id = a.CityId
GROUP BY a.Id,
         a.Email,
         c.Name
ORDER BY Trips DESC,
         a.Id;

--13.Lucrative Destinations--
SELECT TOP 10 c.Id,
              c.Name,
              SUM(h.BaseRate + r.Price) AS [Total Revenue],
              COUNT(t.Id) AS Trips
FROM Cities AS c
     JOIN Hotels AS h ON h.CityId = c.Id
     JOIN Rooms AS r ON r.HotelId = h.Id
     JOIN Trips AS t ON t.RoomId = r.Id
WHERE YEAR(t.BookDate) = '2016'
GROUP BY c.Id,
         c.Name
ORDER BY [Total Revenue] DESC,
         Trips DESC;

--14.Trip Revenues--
SELECT t.Id,
       h.Name,
       r.Type,
       CASE
           WHEN t.CancelDate IS NOT NULL
           THEN 0
           ELSE COUNT(at.AccountId) * (r.Price + h.BaseRate)
       END AS Revenue
FROM Trips AS t
     JOIN Rooms AS r ON r.Id = t.RoomId
     JOIN Hotels AS h ON h.Id = r.HotelId
     JOIN AccountsTrips AS at ON at.TripId = t.Id
GROUP BY t.Id,
         h.Name,
         r.Type,
         t.CancelDate,
         r.Price,
         h.BaseRate
ORDER BY r.Type,
         t.Id;


--15.Top Travelers--
SELECT Id,
       Email,
       CountryCode,
       Trips
FROM
(
    SELECT a.Id,
           a.Email,
           c.CountryCode,
           COUNT(t.Id) AS Trips,
           DENSE_RANK() OVER(PARTITION BY c.CountryCode ORDER BY COUNT(t.Id) DESC,
                                                                 a.Id) AS Rank
    FROM Accounts AS a
         JOIN AccountsTrips AS at ON at.AccountId = a.Id
         JOIN Trips AS t ON t.Id = at.TripId
         JOIN Rooms AS r ON r.Id = t.RoomId
         JOIN Hotels AS h ON h.Id = r.HotelId
         JOIN Cities AS c ON c.Id = h.CityId
    GROUP BY a.Id,
             a.Email,
             c.CountryCode
) AS t
WHERE Rank = 1
ORDER BY Trips DESC,
         Id;

--16.Luggage Fees--
SELECT at.TripId AS [TripId],
       SUM(at.Luggage) AS Luggage,
       CASE
           WHEN SUM(at.Luggage) > 5
           THEN '$'+CONVERT(VARCHAR, SUM(at.Luggage) * 5)
           ELSE '$0'
       END AS [Fee]
FROM AccountsTrips AS at
GROUP BY at.TripId
HAVING SUM(at.Luggage) > 0
ORDER BY Luggage DESC;


  --17.GDPR Violation--
SELECT t.Id,
       FirstName+' '+isnull(MiddleName+' ', '')+LastName AS [Full Name],
       c.Name AS [From],
       ch.Name AS [To],
       CASE
           WHEN t.CancelDate IS NOT NULL
           THEN 'Canceled'
           ELSE CONVERT(VARCHAR, DATEDIFF(day, t.ArrivalDate, t.ReturnDate))+' days'
       END AS [Duaration]
FROM Trips AS t
     JOIN AccountsTrips AS at ON at.TripId = t.Id
     JOIN Accounts AS a ON a.Id = at.AccountId
     JOIN Cities AS c ON c.Id = a.CityId
     JOIN Rooms AS r ON r.Id = t.RoomId
     JOIN Hotels AS h ON h.Id = r.HotelId
     JOIN Cities AS ch ON ch.Id = h.CityId
ORDER BY [Full Name],
         t.Id;

--18.